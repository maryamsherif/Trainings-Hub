openapi: 3.0.0
info:
  title: Training HUB
  version: 1.0.11
externalDocs:
  description: Retrieves all the courses and comments information, you can search for  courses by courseId, courseCategory
  url: http://swagger.io
servers:
  - url: https://localhost:8080/api
tags:
  - name: course
    description: Courses' endpoints
paths:

  /course/getAllCourses:
    get:
      tags:
        - course
      summary: Gets all courses
      description: Gets all the courses in the database.
      operationId: getAllCourses
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 5
          description: Number of items per page
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
                example: { "message": "Success",
    "status": "200",
    "response": [
        {
            "id": 1,
            "description": "Nullam sit amet turpis elementum ligula vehicula consequat. Morbi a ipsum.",
            "category": "Intermediate",
            "instructorName": "Rey Moriarty",
            "rating": 5.0,
            "duration": "29.08",
            "content": "Rey",
            "comments": [
                {
                    "id": 128,
                    "author": "Finlay Mettetal",
                    "comment": "Donec semper sapien a libero. Nam dui.",
                    "rating": 5,
                    "comment_date_time": "2023-06-16T04:45:14"
                }]}]}
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
  /course/getCourseByKeyword/{keyword}:
    get:
      tags:
        - course
      summary: Gets courses using keywords
      description: gets all courses in the database using keywords
      operationId: Keyword
      parameters:
        - name: keyword
          in: path
          description: All keywords which are related to the course
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 5
          description: Number of items per page
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                example: {
    "message": "Success",
    "status": "200",
    "response": [
        {
            "id": 11,
            "description": "Maecenas leo odio, condimentum id, luctus nec, molestie sed, justo.",
            "category": "Beginner",
            "instructorName": "Harmonia Gibbs",
            "rating": 5,
            "duration": "17.31",
            "content": "Harmonia",
            "comments": [
                {
                    "id": 126,
                    "author": "Jermaine Spraging",
                    "comment": "Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Duis faucibus accumsan odio.",
                    "rating": 5,
                    "comment_date_time": "2022-11-15T23:31:03"
                }
            ]
        }
        ]}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                example: {
    "message": "No courses found with keyword sdfghjk",
    "status": "404",
    "response": []
}
            

  /course/getCourseById/{courseId}:
    get:
      tags:
        - course
      summary: Get course by ID
      description: Retrieves a specific course by its ID.
      operationId: getCourseById
      parameters:
        - name: courseId
          in: path
          description: ID of the course to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              example: { "message": "Success",
    "status": "200",
    "response": 
        {
            "id": 1,
            "description": "Nullam sit amet turpis elementum ligula vehicula consequat. Morbi a ipsum.",
            "category": "Intermediate",
            "instructorName": "Rey Moriarty",
            "rating": 5.0,
            "duration": "29.08",
            "content": "Rey",
            "comments": [
                {
                    "id": 128,
                    "author": "Finlay Mettetal",
                    "comment": "Donec semper sapien a libero. Nam dui.",
                    "rating": 5,
                    "comment_date_time": "2023-06-16T04:45:14"
                }]}}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                example: {
    "message": "Course with ID 2000 not found.",
    "status": "404",
    "response": []
}


  /course/getCourseByCategory/{Category}:
    get:
      tags:
        - course
      summary: Get course by Category
      description: Retrieves all courses by their category.
      operationId: Category
      parameters:
        - name: Category
          in: path
          description: Category of the courses to retrieve
          required: true
          schema:
            enum:
              - Beginner
              - Intermediate
              - Professional
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 5
          description: Number of items per page
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              example: {
    "message": "Success",
    "status": "200",
    "response": [
        {
            "id": 11,
            "description": "Maecenas leo odio, condimentum id, luctus nec, molestie sed, justo.",
            "category": "Beginner",
            "instructorName": "Harmonia Gibbs",
            "rating": 5,
            "duration": "17.31",
            "content": "Harmonia",
            "comments": [
                {
                    "id": 126,
                    "author": "Jermaine Spraging",
                    "comment": "Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Duis faucibus accumsan odio.",
                    "rating": 5,
                    "comment_date_time": "2022-11-15T23:31:03"
                }
            ]
        }
        ]}
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                example: {
    "message": "Invalid category: low, the appropriate values are beginner, intermediate, professional",
    "status": "400",
    "response": []
}

  /course/addCourse:
    post:
      tags:
        - course
      summary: Add a new course
      operationId: addCourse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '201':
          description: Course added successfully
          content:
            application/json:
              example: {
    "message": "Success",
    "status": "201",
    "response": {
        "id": 102,
        "description": "Spring Boot crash course",
        "category": "Beginner",
        "instructorName": "Mr. John",
        "rating": 4.0,
        "duration": "49.6",
        "content": "https://www.udemy.com/course/the-ultimate-react-course/",
        "comments": null
    }
}
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                example: {
    "message": "Invalid Input",
    "status": "400",
    "response": []
}

  /course/updateCourse/{courseId}:
    patch:
      tags:
        - course
      summary: Update an existing course
      operationId: editCourse
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '201':
          description: Course uppdated successfully
          content:
            application/json:
              example: {
    "message": "Success",
    "status": "201",
    "response": {
        "id": 102,
        "description": "Spring Boot crash course",
        "category": "Beginner",
        "instructorName": "Mr. John",
        "rating": 4.0,
        "duration": "49.6",
        "content": "https://www.udemy.com/course/the-ultimate-react-course/",
        "comments": null
    }
}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                example: {
    "message": "Course with ID 2000 not found.",
    "status": "404",
    "response": []
}
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                example: {
    "message": "Invalid Input",
    "status": "400",
    "response": []
}

  /course/deleteCourse/{courseId}:
    delete:
      tags:
        - course
      summary: Delete a course
      operationId: deleteCourse
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Course deleted successfully
          content:
            application/json:
              schema:
                example: {
    "message": "Success",
    "status": "200",
    "response": []
}
          
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                example: {
    "message": "Course with ID 2000 not found.",
    "status": "404",
    "response": []
}


  /comment/getAllComments/{courseId}:
    get:
      summary: Get all comments for a specific course
      tags:
        - comment
      operationId: getAllComments
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 5
          description: Number of items per page
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              example: {
    "message": "Success",
    "status": "200",
    "response": [ {
            "id": 205,
            "author": "Amera Salah",
            "comment": "This course helped me to get me my first job",
            "rating": 0,
            "comment_date_time": "2023-08-21T13:18:58"
        }]
}


  /comment/addComment/{courseId}:
    post:
      tags:
        - comment
      summary: Add a new comment
      description: Adds a new comment for a course.
      operationId: addComment
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                example: {
    "message": "Success",
    "status": "201",
    "response": []
}
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                example: {
    "message": "Invalid Input",
    "status": "400",
    "response": []
}

  /comment/deleteComment/{commentId}:
    delete:
      tags:
        - comment
      summary: Delete a comment by ID
      description: Deletes a comment for a course by its ID.
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          description: ID of the comment to be deleted
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                example: {
    "message": "Success",
    "status": "200",
    "response": []
}
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                example: {
    "message": "Invalid Input",
    "status": "400",
    "response": []
}

  /bulkInsertCSV:
    post:
      tags:
        - course
      summary: Bulk insert data from CSV file
      operationId: bulkInsertCSV
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary  
      responses:
        '201':
          description: Courses added successfully
          content:
            application/json:
              schema:
                example: {
    "message": "Courses added successfully !",
    "status": "201",
    "response": []
}
        '400':
          description: Invalid Inout
          content:
            application/json:
              schema:
                example: {
    "message": "Invalid Input",
    "status": "400",
    "response": []
}
        '404':
          description: File not found
          content:
            application/json:
              schema:
                example: {
    "message": "File not found",
    "status": "404",
    "response": []
}

  /bulkInsertPath:
    post:
      tags:
        - course
      summary: Bulk insert data from CSV file given it local path
      operationId: bulkInsertPath
      parameters:
        - name: csvPath
          in: query
          required: true
          schema:
            type: string
            format: byte
          description: URL-encoded path to the CSV file  
      responses:
        '201':
          description: Courses added successfully
          content:
            application/json:
              schema:
                example: {
    "message": "Courses added successfully !",
    "status": "201",
    "response": []
     }
        '400':
          description: Invalid Inout
          content:
            application/json:
              schema:
                example: {
    "message": "Invalid Input",
    "status": "400",
    "response": []
    }
        '404':
          description: File not found
          content:
            application/json:
              schema:
                example: {
    "message": "File not found",
    "status": "404",
    "response": []
    }


components:
  schemas:
    Course:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        description:
          type: string
          example: Spring Boot crash course
        category:
          type: string
          description: Course Level
          enum:
            - Beginner
            - Intermediate
            - Professional
        instructorName:
          type: string
          example: Mr. John
        rating:
          type: integer
          format: int64
          example: 4
        duration:
          type: integer
          format: int64
          example: 49.6
        content:
          type: string
          example: https://www.udemy.com/course/the-ultimate-react-course/
      xml:
        name: course
      required:
        - id
        - description
        - category
        - instructorName
        - rating
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        author:
          type: string
          example: Mr. Ali
        rating:
          type: integer
          format: int64
          example: 4
        comment:
          type: string
          example: This course helped me to get me my first job
      xml:
        name: comment
      required:
        - id
        - author
        - rating
        - comment
